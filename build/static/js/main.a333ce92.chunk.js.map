{"version":3,"sources":["Footer.js","Header.js","LuggageItem.js","LuggageData.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Footer","id","href","Header","className","LuggageItem","props","data","onClick","console","log","LuggageData","category","things","name","inputType","value","Main","document","getElementById","classList","remove","add","style","clear","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQAgBeA,MAbf,WACE,OACE,gCACI,yBAAKC,GAAG,QAAR,yRAIE,uBAAGC,KAAK,iCAAR,6B,MCsBKC,MA5Bf,WACE,OACE,gCACE,wBAAIC,UAAU,QAAd,iBAEA,6BACE,wBAAIA,UAAU,eACZ,4BACE,uBAAGH,GAAG,eAAeC,KAAK,IAAIE,UAAU,UAAxC,UAIF,4BACE,uBAAGH,GAAG,eAAeC,KAAK,KAA1B,cAIF,4BACE,uBAAGD,GAAG,eAAeC,KAAK,KAA1B,gB,MCNGG,MAbf,SAAqBC,GAMnB,OALgBA,EAAMC,KAMpB,yBAAKC,QALP,WACEC,QAAQC,IAAI,kBAIZ,iBC+BWC,EAtCK,CAClB,CACEC,SAAU,cACVC,OAAQ,CACR,CAAEC,KAAM,WACR,CACEA,KAAM,WACNC,UAAW,WACXC,MAAO,6BAIX,CACEJ,SAAU,UACVC,OAAQ,CACR,CACEC,KAAM,UAER,CACEA,KAAM,SACNC,UAAY,SACZC,MAAO,MAIX,CACEJ,SAAU,WACVC,OAAQ,CACR,CACEC,KAAM,aACNC,UAAY,SACZC,MAAO,IAET,CAAEF,KAAM,cCMGG,MApCf,WAWE,OACE,8BACE,yBAAKhB,GAAG,eACN,4BAAQA,GAAG,mBAAmBO,QARpC,WACEU,SAASC,eAAe,UAAUC,UAAUC,OAAO,UACnDH,SAASC,eAAe,WAAWC,UAAUE,IAAI,YAM7C,wBACA,4BAAQrB,GAAG,uBAAuBO,QAdxC,WACEU,SAASC,eAAe,UAAUC,UAAUE,IAAI,UAChDJ,SAASC,eAAe,WAAWC,UAAUC,OAAO,YAYhD,qBACA,yBAAKE,MAAO,CAAEC,MAAO,WAGvB,yBAAKvB,GAAG,SAASG,UAAU,QACzB,yBAAKA,UAAU,gBAAf,uBAGA,kBAAC,EAAD,CAAaG,KAAMI,KAGrB,yBAAKV,GAAG,UAAUG,UAAU,eAC1B,yBAAKA,UAAU,gBAAf,sBAIF,yBAAKmB,MAAO,CAAEC,MAAO,YCrBZC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASC,eAAe,SDyHpB,kBAAmBe,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.a333ce92.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction Footer() {\n  return (\n    <footer>\n        <div id=\"info\">\n          Nazywam się Tomasz Szymański. Stworzyłem tę stronę, aby zaprezentować\n          moje umiejętności w zakresie frontendu. Jeśli chcesz zgłosić uwagę,\n          zaprosić mnie w podróż (albo dać pracę) oto mój email:\n          <a href=\"mailto:tszymanski86@gmail.com\">tszymanski86@gmail.com</a>\n        </div>\n      </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1 className=\"logo\">W DROGĘ!</h1>\n\n      <nav>\n        <ul className=\"destination\">\n          <li>\n            <a id=\"destination0\" href=\"#\" className=\"active\">\n              Egipt\n            </a>\n          </li>\n          <li>\n            <a id=\"destination1\" href=\"#\">\n              Kraków\n            </a>\n          </li>\n          <li>\n            <a id=\"destination2\" href=\"#\">\n              góry\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./App.css\";\n\nfunction LuggageItem(props) {\n  const content = props.data;\n  function dzialaj(){\n    console.log('działam');\n  }\n  //console.log(content);\n  return (\n    <div onClick={dzialaj}>\n      Luggage Item\n    </div>\n  );\n}\n\nexport default LuggageItem;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst LuggageData = [\n  {\n    category: \"elektronika\",\n    things: [\n    { name: \"telefon\" },\n    {\n      name: \"pendrive\",\n      inputType: \"textarea\",\n      value: \"zgrać zdjęcia\",\n    },\n    ],\n  },\n  {\n    category: \"ubrania\",\n    things: [\n    {\n      name: \"kurtka\",\n    },\n    {\n      name: \"majtki\",\n      inputType : \"number\",\n      value: 50,\n    },\n    ],\n  },\n  {\n    category: \"jedzenie\",\n    things: [\n    {\n      name: \"parówki\",\n      inputType : \"number\",\n      value: 10,\n    },\n    { name: \"kanapka\" },\n    ],\n  },\n  ];\n\nexport default LuggageData;","import React from \"react\";\nimport \"./App.css\";\nimport \"./Main.css\";\nimport LuggageItem from \"./LuggageItem\";\nimport LuggageData from \"./LuggageData\";\n\nfunction Main() {\n  function showLuggageSection(){\n    document.getElementById(\"things\").classList.add(\"hidden\");\n    document.getElementById(\"luggage\").classList.remove(\"hidden\");\n  }\n\n  function showAddSection(){\n    document.getElementById(\"things\").classList.remove(\"hidden\");\n    document.getElementById(\"luggage\").classList.add(\"hidden\");\n  }\n\n  return (\n    <main>\n      <div id=\"viewButtons\">\n        <button id=\"addSectionButton\" onClick={showAddSection}>DODAJ DO BAGAŻU</button>\n        <button id=\"luggageSectionButton\" onClick={showLuggageSection}>MÓJ BAGAŻ</button>\n        <div style={{ clear: \"both\" }}></div>\n      </div>\n\n      <div id=\"things\" className=\"work\">\n        <div className=\"sectionTitle\">\n          DODAJ DO BAGAŻ\n        </div>\n        <LuggageItem data={LuggageData}/>\n      </div>\n\n      <div id=\"luggage\" className=\"work hidden\">\n        <div className=\"sectionTitle\">\n          MÓJ BAGAŻ\n        </div>\n      </div>\n      <div style={{ clear: \"both\" }}></div>\n    </main>\n  );\n}\n\nexport default Main;","import React from \"react\";\nimport \"./App.css\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}